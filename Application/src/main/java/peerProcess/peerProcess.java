/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package peerProcess;

import java.io.FileNotFoundException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class peerProcess {

    public final String     ConfigFileName  = "Common.cfg";
    public final String     PeerInfoFile    = "PeerInfo.cfg";
    public int              PreferredNeighbourCount;
    public int              UnchockingInterval;
    public int              OptimisticUnchokingInterval;
    public String           FileName;
    public int              FileSize;
    public int              PieceSize;
    public Logger           LogFile;
    public int              PeerId;

    public ArrayList<PeerConfigurationData>        PeerList;

    class PeerConfigurationData {
        int         PeerId;
        String      HostName;
        int         PortNumber;
        boolean     HasFile;
    }

    private peerProcess (int pPeerId) {

        FileSize  = 0;
        PieceSize = 0;
        PeerId    = pPeerId;
        FileName  = null;
        LogFile   = null;

        OptimisticUnchokingInterval = 0;
        UnchockingInterval          = 0;
        PreferredNeighbourCount     = 0;

        PeerList = new ArrayList<PeerConfigurationData>();
    }

    private boolean Initialize () {

        if (!ReadConfigurations())
            return false;

        return (Logger.GetLogger().Initialize(PeerId) == eLoggerErrors.E_LE_SUCCESS);
    }

    /**
     * Reads both the configuration files and populates the app variables.
     *
     * @return true when the configurations are successfully read and false otherwise.
     */
    private boolean ReadConfigurations () {

        Scanner     fileScanner;
        String      configLabel;

        if (Files.notExists(Paths.get (ConfigFileName))){
            System.out.println ("Missing file: \"" + ConfigFileName + "\" at location: \"" + Paths.get(".").toAbsolutePath().toString() + "\"");
            return false;
        }

        if (Files.notExists(Paths.get (PeerInfoFile))){
            System.out.println ("Missing file: \"" + PeerInfoFile + "\" at location: \"" + Paths.get(".").toAbsolutePath().toString() + "\"");
            return false;
        }

        try {
            fileScanner = new Scanner(Paths.get (ConfigFileName));

            while (fileScanner.hasNext()) {

                configLabel = fileScanner.next();

                // updating the relevant configuration based on the config label
                switch (configLabel){
                    case "NumberOfPreferredNeighbors":
                        PreferredNeighbourCount = fileScanner.nextInt();
                        break;

                    case "UnchokingInterval":
                        UnchockingInterval = fileScanner.nextInt();
                        break;

                    case "OptimisticUnchokingInterval":
                        OptimisticUnchokingInterval = fileScanner.nextInt();
                        break;

                    case "FileName":
                        FileName = fileScanner.next();
                        break;

                    case "FileSize":
                        FileSize = fileScanner.nextInt();
                        break;

                    case "PieceSize":
                        PieceSize = fileScanner.nextInt();
                        break;

                    default:
                        System.out.println("Invalid configuration value: " + configLabel);
                        return false;


                }
            }

            // validate the configurations
            if (PreferredNeighbourCount < 1 || UnchockingInterval < 1 || OptimisticUnchokingInterval < 1 || FileSize < 1 || PieceSize < 1){

                System.out.println ("One of the configuration is file \"" + ConfigFileName +"\" is incorrect.");
                return false;
            }

            if (FileName == null || Files.notExists(Paths.get(FileName))){

                System.out.println ("The file: \""+ FileName + "\" specified in the configuration does not exists.");
                return false;
            }

            /*if (Files.size(Paths.get(FileName)) != FileSize){

                System.out.println ("The file size specified in configuration and size of actual file does not match.");
                return false;
            }*/

            fileScanner   = new Scanner(Paths.get (PeerInfoFile));

            while (fileScanner.hasNext()){

                PeerConfigurationData peerData = new PeerConfigurationData();

                peerData.PeerId     = fileScanner.nextInt();
                peerData.HostName   = fileScanner.next();
                peerData.PortNumber = fileScanner.nextInt();
                peerData.HasFile    = (fileScanner.nextInt() == 1);

                PeerList.add(peerData);
            }
        }
        catch (FileNotFoundException ex){
            System.out.println ("One of the configuration file is missing.");
            System.out.println (ex.getMessage());
            return false;
        }
        catch (Exception ex){
            System.out.println ("Error in parsing one of the configuration file.");
            System.out.println (ex.getMessage());
            return false;
        }

        return true;
    }

    public static void main(String[] args) {

        peerProcess     myApp = new peerProcess(Integer.parseInt(args[0]));

        if (!myApp.Initialize())
            return;

        //the application can go multithreaded beyond this point
    }
}
